#1
#INSERTION SORT IMPLEMENTATION IN PYHTON

import random
import timeit

def insertion_sort(arr):
    n = len(arr)

    for i in range(1, n):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

    return arr

# Benchmarking and random list generation for testing
if __name__ == "__main__":

    # Generating a random list
    random_list = [random.randint(1, 1000) for _ in range(1000)]

    # Benchmarking the insertion_sort function using timeit
    time_taken = timeit.timeit(lambda: insertion_sort(random_list.copy()), number=1000)
    
    print(f"Sorted list: {insertion_sort(random_list)}")
    print(f"Time taken is: {time_taken:} seconds")


#SEECTION SORT IMPLEMENTATION IN PYTHON

import random
import timeit

def selection_sort(arr):
    n = len(arr)

    for i in range(n - 1):
        min_index = i

        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j

        # Swap the minimum element found with the first unsorted element
        arr[i], arr[min_index] = arr[min_index], arr[i]

    return arr

# Benchmarking and random list generation for testing
if __name__ == "__main__":

    # Generating a random list
    random_list = [random.randint(1, 1000) for _ in range(1000)]

    # Benchmarking the selection_sort function using timeit
    time_taken = timeit.timeit(lambda: selection_sort(random_list.copy()), number=1000)
    
    print(f"Sorted list: {selection_sort(random_list)}")
    print(f"Time taken is: {time_taken:} seconds")

#BUBBLE SORT IMPLEMENTATION IN PYTHON

import random
import timeit


def bubble_sort(arr):
    n = len(arr)

    for i in range(n):
        swapped = False
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
                swapped = True
        if not swapped:
            break

    return arr

# Benchmarking and random list generation for testing
if __name__ == "__main__":

    # Generate a random list for testing
    random_list = [random.randint(1, 1000) for _ in range(1000)]

    # Benchmarking the bubble_sort function using timeit
    time_taken = timeit.timeit(lambda: bubble_sort(random_list.copy()), number=1000)
    
    print(f"Sorted list: {bubble_sort(random_list)}")
    print(f"Time taken: {time_taken:} seconds")


#2
#ARGUINNG THE CORRECTNESS OF THE SELECTION SORT

Primarily define a loop invariant
>It is a condition that holds true for each iteration of the outer loop.
>In the case of Selection Sort, a possible loop invariant is that after the j-th iteration of
the outer loop, the first j elements of the array are sorted.

1. Initialization:
>We start by showing that the loop invariant holds before the first
loop iteration.
>In Selection Sort, before the first iteration (i = 0), the array is unsorted, and
the loop invariant trivially holds true.

2. Maintenance:
>Assume that the loop invariant holds true for some iteration "j".
>Then we show that it also holds true for the next iteration "j+1".
>In the Selection Sort, after an interation let it be the i-th iteration, the smallest element
among the remaining unsorted elements is selected and swapped with the element at index j.
This ensures that the first j + 1 elements are sorted.

3. Termination:
>Finally, we examine what happens when the loop terminates.
>In Selection Sort, after the last iteration (j = n - 1, where n is the length of the array),
the entire array is sorted because each iteration selects and places the smallest unsorted 
element at its correct position.




3. BENCHMARKING THE INPUTS:

I used the "timeit" module for benchmarking.

DEVICE specifications:
Ram: 16.0 GB (3200 mhz)
Processor: Intel CORE i7
OS: Windows 10
Python: 3.11(64 bit)

a. INSERTION SORT
A[10] = 0.0023 seconds
A[30] = 0.0161 seconds
A[10^3] = 17.6234 seconds


b. SELECTION SORT
A[10] = 0.0031 seconds
A[30] = 0.0190 seconds
A[10^3] = 16.8605 seconds

C. BUBBLE SORT
A[10] = 0.0056 seconds
A[30] = 0.0419 seconds
A[10^3] = 37.4156 seconds









